/*
 * SmartCSS yacc
 */

%{
//<?php
$parser = Parser::getInstance();
//$parser->debug = true;
%}
%token LBRACE RBRACE
%token IDENT NUMBER LENGTH
%token ',' ':' ';'
%token S

%%

stylesheet
    : rulesets

rulesets
    : /* empty */      { $$ = Parser::getInstance()->setTopNode(); }
    | rulesets ruleset { $$ = Parser::getInstance()->catNode($1, $2); }

ruleset
    : selectors LBRACE declarations RBRACE { $$ = Parser::getInstance()->genRuleset($1, $3); }

selectors
    : selector               { $$ = $1; }
    | selectors ',' selector { $$ = Parser::getInstance()->catNode($1, $3); }

selector
    : IDENT { $$ = Parser::getInstance()->genSelector($1); }

declarations
    : decl              { $$ = $1; }
    | declarations decl { $$ = Parser::getInstance()->catNode($1, $2); }

decl : declaration | ruleset

declaration
    : property ':' expr ';' { $$ = Parser::getInstance()->genDeclaration($1, $3); }

property
    : IDENT { $$ = Parser::getInstance()->genProperty($1); }

expr
    : NUMBER { $$ = Parser::getInstance()->genExpr($1); }
    | IDENT  { $$ = Parser::getInstance()->genExpr($1); }
    | LENGTH { $$ = Parser::getInstance()->genExpr($1); }

%%

//$GLOBALS['debug'] = 1;
$lexbuf = file_get_contents('test.css');
$lexbuf = preg_replace('/^\s*(.*?)\s*$/m', '$1', $lexbuf);
$lexbuf = preg_replace('/[\r\n]/', '', $lexbuf);
yyparse();
$parser = Parser::getInstance();
echo "----\n";
echo $parser->run();

function __autoload($class) {
    $class = preg_replace('/_/', DIRECTORY_SEPARATOR, $class);
    require "libs/$class.class.php";
}

function yylex() {
    global $lexbuf, $yylval;
    $parser = Parser::getInstance();

    while ($lexbuf) {
        if (!empty($GLOBALS['debug'])) {
            var_dump($lexbuf);
        }

        if (strpos($lexbuf, '{') === 0) {
            $lexbuf = substr($lexbuf, 1);
            //p('LBRACE');
            return LBRACE;
        } else if (strpos($lexbuf, '}') === 0) {
            $lexbuf = substr($lexbuf, 1);
            //p('RBRACE');
            return RBRACE;
        } else if (preg_match('/^(\d+)(em|ex|px|cm|mm|in|pt)/', $lexbuf, $matches)) {
            $yylval = $matches[1] . $matches[2];
            $lexbuf = substr($lexbuf, strlen($yylval));
            p("LENGTH:[$yylval]");
            return LENGTH;
        } else if (preg_match('/^(\d+)/', $lexbuf, $matches)) {
            $yylval = (string)$matches[1];
            $lexbuf = substr($lexbuf, strlen($yylval));
            p("NUMBER:[$yylval]");
            return NUMBER;
        } else if (preg_match('/^(-?[_a-z][_a-z0-9-]*)/', $lexbuf, $matches)) {
            $yylval = $matches[1];
            $lexbuf = substr($lexbuf, strlen($yylval));
            p("IDENT:[$yylval]");
            return IDENT;
        } else {
            $ret = ord($lexbuf);
            $lexbuf = substr($lexbuf, 1);
            if ($ret === 32) {
                //p('skip space');
                continue;
            }
            p("UNKNOWN:[$ret]");
            return $ret;
        }
    }
}

function yyerror($msg) {
    echo "[error]$msg\n";
}

function p($msg) {
    if (!empty($GLOBALS['debug'])) {
        echo $msg . "\n";
    }
}
