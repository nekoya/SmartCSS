/*
 * SmartCSS yacc
 */

%{
//<?php
$parser = SCSS_Parser::getInstance();
//$parser->debug = true;
%}
%token LBRACE RBRACE SPACE PLUS GREATER ASTERISK
%token STRING IDENT NUMBER HASH HEXCOLOR PERCENTAGE URI
%token EMS EXS LENGTH ANGLE TIME FREQ
%token IMPORTANT_SYM
%token CHARSET IMPORT
%token EXPRESSION
%token SELECTOR
%token DECLARATION
%token ','

%%
root : stylesheet { $$ = topnode($1); }

stylesheet
    : charset imports rulesets { $$ = cat($1, array($2, $3)); }

charset
    : /* empty */ { $$ = gen('empty'); }
    | CHARSET     { $$ = gen('charset', $1); }

imports
    : /* empty */    { $$ = gen('empty'); }
    | imports import { $$ = cat($1, $2); }

import
    : IMPORT { $$ = gen('import', $1); }

combinator
    : PLUS s    { $$ = '+'; }
    | GREATER s { $$ = '>'; }
    | SPACE

rulesets
    : ruleset
    | rulesets ruleset { $$ = cat($1, $2); }

ruleset
    : selectors LBRACE declarations RBRACE { $$ = gen('ruleset', $1, $3); }

selectors
    : selector
    | selector s ',' s selector { $$ = cat($1, $5); }

selector
    : SELECTOR                     { $$ = gen('selector', $1); }
    | selector combinator SELECTOR { $$ = $1; $1->appendValue($2, $3); }

declarations
    : decl
    | declarations decl { $$ = cat($1, $2); }

decl : declaration | ruleset

declaration
    : DECLARATION { $$ = gen('declaration', $1); }

s : | SPACE

%%

function __autoload($class) {
    $class = preg_replace('/_/', DIRECTORY_SEPARATOR, $class);
    require "libs/$class.class.php";
}

$lexer = new SCSS_Lexer();

function yylex() {
    global $lexer;
    return $lexer->yylex();
}

function yyerror($msg) {
    global $lexbuf;
    var_dump($lexbuf);
    die("[error]$msg\n");
}

function gen($type, $val1 = null, $val2 = null) {
    $parser = SCSS_Parser::getInstance();
    $method = 'gen' . ucfirst($type);
    return $parser->$method($val1, $val2);
}

function cat($base, $newone) {
    $parser = SCSS_Parser::getInstance();
    return $parser->catNode($base, $newone);
}

function topnode($node) {
    $parser = SCSS_Parser::getInstance();
    return $parser->setTopNode($node);
}
