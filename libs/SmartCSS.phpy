/*
 * SmartCSS yacc
 */

%{
//<?php
$parser = SCSS_Parser::getInstance();
//$parser->debug = true;
%}
%token LBRACE RBRACE SPACE
%token STRING IDENT NUMBER HASH HEXCOLOR PERCENTAGE URI
%token EMS EXS LENGTH ANGLE TIME FREQ
%token IMPORTANT_SYM
%token CHARSET IMPORT
%token SELECTOR
%token TERM
%token '-' ':' ';'
%token COMMA

%%
root : stylesheet { $$ = topnode($1); }

stylesheet
    : charset imports rulesets { $$ = cat($1, array($2, $3)); }

charset
    : /* empty */ { $$ = gen('empty'); }
    | CHARSET     { $$ = gen('charset', $1); }

imports
    : /* empty */    { $$ = gen('empty'); }
    | imports import { $$ = cat($1, $2); }

import
    : IMPORT { $$ = gen('import', $1); }

unary_operator
    : { $$ = ''; }
    | '-'
    | '+'

property
    : IDENT s

rulesets
    : ruleset
    | rulesets ruleset { $$ = cat($1, $2); }

ruleset
    : selectors LBRACE s declarations RBRACE s { $$ = gen('ruleset', $1, $4); }

selectors
    : selector
    | selectors COMMA s selector { $$ = cat($1, $4); }

selector
    : SELECTOR { $$ = gen('selector', $1); }

declarations
    : declaration
    | ruleset
    | declarations followdecl { $$ = cat($1, $2); }
    | declarations ruleset    { $$ = cat($1, $2); }

followdecl
    : ';' s
    | ';' s declaration { $$ = $3; }

declaration
    : property ':' s expr { $$ = gen('declaration', $1, $4); }

expr
    : term
    | expr term { $$ = $1 . ' ' . $2; }

term
    : unary_operator PERCENTAGE s { $$ = $1 . $2; }
    | unary_operator LENGTH s     { $$ = $1 . $2; }
    | unary_operator EMS s        { $$ = $1 . $2; }
    | unary_operator EXS s        { $$ = $1 . $2; }
    | unary_operator ANGLE s      { $$ = $1 . $2; }
    | unary_operator TIME s       { $$ = $1 . $2; }
    | unary_operator FREQ s       { $$ = $1 . $2; }
    | unary_operator NUMBER s     { $$ = $1 . $2; }
    | URI s
    | HEXCOLOR
    | IDENT s
    | STRING s

s : | SPACE

%%

function __autoload($class) {
    $dirname = dirname(__FILE__);
    $class = preg_replace('/_/', DIRECTORY_SEPARATOR, $class);
    $filename = $dirname . DIRECTORY_SEPARATOR . $class . '.class.php';
    require $filename;
}

function yylex() {
    $lexer = SCSS_Lexer::getInstance();
    $token = $lexer->yylex();
    return (defined($token)) ? constant($token) : $token;
}

function yyerror($msg) {
    throw new Exception($msg);
}

function gen($type, $val1 = null, $val2 = null) {
    $parser = SCSS_Parser::getInstance();
    $method = 'gen' . ucfirst($type);
    return $parser->$method($val1, $val2);
}

function cat($base, $newone) {
    $parser = SCSS_Parser::getInstance();
    return $parser->catNode($base, $newone);
}

function topnode($node) {
    $parser = SCSS_Parser::getInstance();
    return $parser->setTopNode($node);
}
